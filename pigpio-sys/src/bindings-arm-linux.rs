/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201605;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 24;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _PTHREAD_H: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const __defined_schedparam: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _XLOCALE_H: u32 = 1;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 36;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 24;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_COND_COMPAT_T: u32 = 12;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 32;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 20;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __have_pthread_attr_t: u32 = 1;
pub const __PTHREAD_SPINS: u32 = 0;
pub const __PTHREAD_RWLOCK_ELISION_EXTRA: u32 = 0;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const PIGPIO_VERSION: u32 = 67;
pub const PI_INPFIFO: &'static [u8; 12usize] = b"/dev/pigpio\0";
pub const PI_OUTFIFO: &'static [u8; 12usize] = b"/dev/pigout\0";
pub const PI_ERRFIFO: &'static [u8; 12usize] = b"/dev/pigerr\0";
pub const PI_ENVPORT: &'static [u8; 12usize] = b"PIGPIO_PORT\0";
pub const PI_ENVADDR: &'static [u8; 12usize] = b"PIGPIO_ADDR\0";
pub const PI_LOCKFILE: &'static [u8; 20usize] = b"/var/run/pigpio.pid\0";
pub const PI_I2C_COMBINED: &'static [u8; 44usize] =
    b"/sys/module/i2c_bcm2708/parameters/combined\0";
pub const WAVE_FLAG_READ: u32 = 1;
pub const WAVE_FLAG_TICK: u32 = 2;
pub const BSC_FIFO_SIZE: u32 = 512;
pub const PI_MIN_GPIO: u32 = 0;
pub const PI_MAX_GPIO: u32 = 53;
pub const PI_MAX_USER_GPIO: u32 = 31;
pub const PI_OFF: u32 = 0;
pub const PI_ON: u32 = 1;
pub const PI_CLEAR: u32 = 0;
pub const PI_SET: u32 = 1;
pub const PI_LOW: u32 = 0;
pub const PI_HIGH: u32 = 1;
pub const PI_TIMEOUT: u32 = 2;
pub const PI_INPUT: u32 = 0;
pub const PI_OUTPUT: u32 = 1;
pub const PI_ALT0: u32 = 4;
pub const PI_ALT1: u32 = 5;
pub const PI_ALT2: u32 = 6;
pub const PI_ALT3: u32 = 7;
pub const PI_ALT4: u32 = 3;
pub const PI_ALT5: u32 = 2;
pub const PI_PUD_OFF: u32 = 0;
pub const PI_PUD_DOWN: u32 = 1;
pub const PI_PUD_UP: u32 = 2;
pub const PI_DEFAULT_DUTYCYCLE_RANGE: u32 = 255;
pub const PI_MIN_DUTYCYCLE_RANGE: u32 = 25;
pub const PI_MAX_DUTYCYCLE_RANGE: u32 = 40000;
pub const PI_SERVO_OFF: u32 = 0;
pub const PI_MIN_SERVO_PULSEWIDTH: u32 = 500;
pub const PI_MAX_SERVO_PULSEWIDTH: u32 = 2500;
pub const PI_HW_PWM_MIN_FREQ: u32 = 1;
pub const PI_HW_PWM_MAX_FREQ: u32 = 125000000;
pub const PI_HW_PWM_RANGE: u32 = 1000000;
pub const PI_HW_CLK_MIN_FREQ: u32 = 4689;
pub const PI_HW_CLK_MAX_FREQ: u32 = 250000000;
pub const PI_NOTIFY_SLOTS: u32 = 32;
pub const PI_NTFY_FLAGS_EVENT: u32 = 128;
pub const PI_NTFY_FLAGS_ALIVE: u32 = 64;
pub const PI_NTFY_FLAGS_WDOG: u32 = 32;
pub const PI_WAVE_BLOCKS: u32 = 4;
pub const PI_WAVE_MAX_PULSES: u32 = 12000;
pub const PI_WAVE_MAX_CHARS: u32 = 1200;
pub const PI_BB_I2C_MIN_BAUD: u32 = 50;
pub const PI_BB_I2C_MAX_BAUD: u32 = 500000;
pub const PI_BB_SPI_MIN_BAUD: u32 = 50;
pub const PI_BB_SPI_MAX_BAUD: u32 = 250000;
pub const PI_BB_SER_MIN_BAUD: u32 = 50;
pub const PI_BB_SER_MAX_BAUD: u32 = 250000;
pub const PI_BB_SER_NORMAL: u32 = 0;
pub const PI_BB_SER_INVERT: u32 = 1;
pub const PI_WAVE_MIN_BAUD: u32 = 50;
pub const PI_WAVE_MAX_BAUD: u32 = 1000000;
pub const PI_SPI_MIN_BAUD: u32 = 32000;
pub const PI_SPI_MAX_BAUD: u32 = 125000000;
pub const PI_MIN_WAVE_DATABITS: u32 = 1;
pub const PI_MAX_WAVE_DATABITS: u32 = 32;
pub const PI_MIN_WAVE_HALFSTOPBITS: u32 = 2;
pub const PI_MAX_WAVE_HALFSTOPBITS: u32 = 8;
pub const PI_WAVE_MAX_MICROS: u32 = 1800000000;
pub const PI_MAX_WAVES: u32 = 250;
pub const PI_MAX_WAVE_CYCLES: u32 = 65535;
pub const PI_MAX_WAVE_DELAY: u32 = 65535;
pub const PI_WAVE_COUNT_PAGES: u32 = 10;
pub const PI_WAVE_MODE_ONE_SHOT: u32 = 0;
pub const PI_WAVE_MODE_REPEAT: u32 = 1;
pub const PI_WAVE_MODE_ONE_SHOT_SYNC: u32 = 2;
pub const PI_WAVE_MODE_REPEAT_SYNC: u32 = 3;
pub const PI_WAVE_NOT_FOUND: u32 = 9998;
pub const PI_NO_TX_WAVE: u32 = 9999;
pub const PI_FILE_SLOTS: u32 = 16;
pub const PI_I2C_SLOTS: u32 = 64;
pub const PI_SPI_SLOTS: u32 = 32;
pub const PI_SER_SLOTS: u32 = 16;
pub const PI_MAX_I2C_ADDR: u32 = 127;
pub const PI_NUM_AUX_SPI_CHANNEL: u32 = 3;
pub const PI_NUM_STD_SPI_CHANNEL: u32 = 2;
pub const PI_MAX_I2C_DEVICE_COUNT: u32 = 65536;
pub const PI_MAX_SPI_DEVICE_COUNT: u32 = 65536;
pub const PI_I2C_RDRW_IOCTL_MAX_MSGS: u32 = 42;
pub const PI_I2C_M_WR: u32 = 0;
pub const PI_I2C_M_RD: u32 = 1;
pub const PI_I2C_M_TEN: u32 = 16;
pub const PI_I2C_M_RECV_LEN: u32 = 1024;
pub const PI_I2C_M_NO_RD_ACK: u32 = 2048;
pub const PI_I2C_M_IGNORE_NAK: u32 = 4096;
pub const PI_I2C_M_REV_DIR_ADDR: u32 = 8192;
pub const PI_I2C_M_NOSTART: u32 = 16384;
pub const PI_I2C_END: u32 = 0;
pub const PI_I2C_ESC: u32 = 1;
pub const PI_I2C_START: u32 = 2;
pub const PI_I2C_COMBINED_ON: u32 = 2;
pub const PI_I2C_STOP: u32 = 3;
pub const PI_I2C_COMBINED_OFF: u32 = 3;
pub const PI_I2C_ADDR: u32 = 4;
pub const PI_I2C_FLAGS: u32 = 5;
pub const PI_I2C_READ: u32 = 6;
pub const PI_I2C_WRITE: u32 = 7;
pub const BSC_DR: u32 = 0;
pub const BSC_RSR: u32 = 1;
pub const BSC_SLV: u32 = 2;
pub const BSC_CR: u32 = 3;
pub const BSC_FR: u32 = 4;
pub const BSC_IFLS: u32 = 5;
pub const BSC_IMSC: u32 = 6;
pub const BSC_RIS: u32 = 7;
pub const BSC_MIS: u32 = 8;
pub const BSC_ICR: u32 = 9;
pub const BSC_DMACR: u32 = 10;
pub const BSC_TDR: u32 = 11;
pub const BSC_GPUSTAT: u32 = 12;
pub const BSC_HCTRL: u32 = 13;
pub const BSC_DEBUG_I2C: u32 = 14;
pub const BSC_DEBUG_SPI: u32 = 15;
pub const BSC_CR_TESTFIFO: u32 = 2048;
pub const BSC_CR_RXE: u32 = 512;
pub const BSC_CR_TXE: u32 = 256;
pub const BSC_CR_BRK: u32 = 128;
pub const BSC_CR_CPOL: u32 = 16;
pub const BSC_CR_CPHA: u32 = 8;
pub const BSC_CR_I2C: u32 = 4;
pub const BSC_CR_SPI: u32 = 2;
pub const BSC_CR_EN: u32 = 1;
pub const BSC_FR_RXBUSY: u32 = 32;
pub const BSC_FR_TXFE: u32 = 16;
pub const BSC_FR_RXFF: u32 = 8;
pub const BSC_FR_TXFF: u32 = 4;
pub const BSC_FR_RXFE: u32 = 2;
pub const BSC_FR_TXBUSY: u32 = 1;
pub const BSC_SDA_MOSI: u32 = 18;
pub const BSC_SCL_SCLK: u32 = 19;
pub const BSC_MISO: u32 = 20;
pub const BSC_CE_N: u32 = 21;
pub const PI_MAX_BUSY_DELAY: u32 = 100;
pub const PI_MIN_WDOG_TIMEOUT: u32 = 0;
pub const PI_MAX_WDOG_TIMEOUT: u32 = 60000;
pub const PI_MIN_TIMER: u32 = 0;
pub const PI_MAX_TIMER: u32 = 9;
pub const PI_MIN_MS: u32 = 10;
pub const PI_MAX_MS: u32 = 60000;
pub const PI_MAX_SCRIPTS: u32 = 32;
pub const PI_MAX_SCRIPT_TAGS: u32 = 50;
pub const PI_MAX_SCRIPT_VARS: u32 = 150;
pub const PI_MAX_SCRIPT_PARAMS: u32 = 10;
pub const PI_SCRIPT_INITING: u32 = 0;
pub const PI_SCRIPT_HALTED: u32 = 1;
pub const PI_SCRIPT_RUNNING: u32 = 2;
pub const PI_SCRIPT_WAITING: u32 = 3;
pub const PI_SCRIPT_FAILED: u32 = 4;
pub const PI_MIN_SIGNUM: u32 = 0;
pub const PI_MAX_SIGNUM: u32 = 63;
pub const PI_TIME_RELATIVE: u32 = 0;
pub const PI_TIME_ABSOLUTE: u32 = 1;
pub const PI_MAX_MICS_DELAY: u32 = 1000000;
pub const PI_MAX_MILS_DELAY: u32 = 60000;
pub const PI_BUF_MILLIS_MIN: u32 = 100;
pub const PI_BUF_MILLIS_MAX: u32 = 10000;
pub const PI_CLOCK_PWM: u32 = 0;
pub const PI_CLOCK_PCM: u32 = 1;
pub const PI_MIN_DMA_CHANNEL: u32 = 0;
pub const PI_MAX_DMA_CHANNEL: u32 = 14;
pub const PI_MIN_SOCKET_PORT: u32 = 1024;
pub const PI_MAX_SOCKET_PORT: u32 = 32000;
pub const PI_DISABLE_FIFO_IF: u32 = 1;
pub const PI_DISABLE_SOCK_IF: u32 = 2;
pub const PI_LOCALHOST_SOCK_IF: u32 = 4;
pub const PI_DISABLE_ALERT: u32 = 8;
pub const PI_MEM_ALLOC_AUTO: u32 = 0;
pub const PI_MEM_ALLOC_PAGEMAP: u32 = 1;
pub const PI_MEM_ALLOC_MAILBOX: u32 = 2;
pub const PI_MAX_STEADY: u32 = 300000;
pub const PI_MAX_ACTIVE: u32 = 1000000;
pub const PI_CFG_DBG_LEVEL: u32 = 0;
pub const PI_CFG_ALERT_FREQ: u32 = 4;
pub const PI_CFG_RT_PRIORITY: u32 = 256;
pub const PI_CFG_STATS: u32 = 512;
pub const PI_CFG_NOSIGHANDLER: u32 = 1024;
pub const PI_CFG_ILLEGAL_VAL: u32 = 2048;
pub const RISING_EDGE: u32 = 0;
pub const FALLING_EDGE: u32 = 1;
pub const EITHER_EDGE: u32 = 2;
pub const PI_MAX_PAD: u32 = 2;
pub const PI_MIN_PAD_STRENGTH: u32 = 1;
pub const PI_MAX_PAD_STRENGTH: u32 = 16;
pub const PI_FILE_NONE: u32 = 0;
pub const PI_FILE_MIN: u32 = 1;
pub const PI_FILE_READ: u32 = 1;
pub const PI_FILE_WRITE: u32 = 2;
pub const PI_FILE_RW: u32 = 3;
pub const PI_FILE_APPEND: u32 = 4;
pub const PI_FILE_CREATE: u32 = 8;
pub const PI_FILE_TRUNC: u32 = 16;
pub const PI_FILE_MAX: u32 = 31;
pub const PI_FROM_START: u32 = 0;
pub const PI_FROM_CURRENT: u32 = 1;
pub const PI_FROM_END: u32 = 2;
pub const MAX_CONNECT_ADDRESSES: u32 = 256;
pub const PI_MAX_EVENT: u32 = 31;
pub const PI_EVENT_BSC: u32 = 31;
pub const PI_CMD_MODES: u32 = 0;
pub const PI_CMD_MODEG: u32 = 1;
pub const PI_CMD_PUD: u32 = 2;
pub const PI_CMD_READ: u32 = 3;
pub const PI_CMD_WRITE: u32 = 4;
pub const PI_CMD_PWM: u32 = 5;
pub const PI_CMD_PRS: u32 = 6;
pub const PI_CMD_PFS: u32 = 7;
pub const PI_CMD_SERVO: u32 = 8;
pub const PI_CMD_WDOG: u32 = 9;
pub const PI_CMD_BR1: u32 = 10;
pub const PI_CMD_BR2: u32 = 11;
pub const PI_CMD_BC1: u32 = 12;
pub const PI_CMD_BC2: u32 = 13;
pub const PI_CMD_BS1: u32 = 14;
pub const PI_CMD_BS2: u32 = 15;
pub const PI_CMD_TICK: u32 = 16;
pub const PI_CMD_HWVER: u32 = 17;
pub const PI_CMD_NO: u32 = 18;
pub const PI_CMD_NB: u32 = 19;
pub const PI_CMD_NP: u32 = 20;
pub const PI_CMD_NC: u32 = 21;
pub const PI_CMD_PRG: u32 = 22;
pub const PI_CMD_PFG: u32 = 23;
pub const PI_CMD_PRRG: u32 = 24;
pub const PI_CMD_HELP: u32 = 25;
pub const PI_CMD_PIGPV: u32 = 26;
pub const PI_CMD_WVCLR: u32 = 27;
pub const PI_CMD_WVAG: u32 = 28;
pub const PI_CMD_WVAS: u32 = 29;
pub const PI_CMD_WVGO: u32 = 30;
pub const PI_CMD_WVGOR: u32 = 31;
pub const PI_CMD_WVBSY: u32 = 32;
pub const PI_CMD_WVHLT: u32 = 33;
pub const PI_CMD_WVSM: u32 = 34;
pub const PI_CMD_WVSP: u32 = 35;
pub const PI_CMD_WVSC: u32 = 36;
pub const PI_CMD_TRIG: u32 = 37;
pub const PI_CMD_PROC: u32 = 38;
pub const PI_CMD_PROCD: u32 = 39;
pub const PI_CMD_PROCR: u32 = 40;
pub const PI_CMD_PROCS: u32 = 41;
pub const PI_CMD_SLRO: u32 = 42;
pub const PI_CMD_SLR: u32 = 43;
pub const PI_CMD_SLRC: u32 = 44;
pub const PI_CMD_PROCP: u32 = 45;
pub const PI_CMD_MICS: u32 = 46;
pub const PI_CMD_MILS: u32 = 47;
pub const PI_CMD_PARSE: u32 = 48;
pub const PI_CMD_WVCRE: u32 = 49;
pub const PI_CMD_WVDEL: u32 = 50;
pub const PI_CMD_WVTX: u32 = 51;
pub const PI_CMD_WVTXR: u32 = 52;
pub const PI_CMD_WVNEW: u32 = 53;
pub const PI_CMD_I2CO: u32 = 54;
pub const PI_CMD_I2CC: u32 = 55;
pub const PI_CMD_I2CRD: u32 = 56;
pub const PI_CMD_I2CWD: u32 = 57;
pub const PI_CMD_I2CWQ: u32 = 58;
pub const PI_CMD_I2CRS: u32 = 59;
pub const PI_CMD_I2CWS: u32 = 60;
pub const PI_CMD_I2CRB: u32 = 61;
pub const PI_CMD_I2CWB: u32 = 62;
pub const PI_CMD_I2CRW: u32 = 63;
pub const PI_CMD_I2CWW: u32 = 64;
pub const PI_CMD_I2CRK: u32 = 65;
pub const PI_CMD_I2CWK: u32 = 66;
pub const PI_CMD_I2CRI: u32 = 67;
pub const PI_CMD_I2CWI: u32 = 68;
pub const PI_CMD_I2CPC: u32 = 69;
pub const PI_CMD_I2CPK: u32 = 70;
pub const PI_CMD_SPIO: u32 = 71;
pub const PI_CMD_SPIC: u32 = 72;
pub const PI_CMD_SPIR: u32 = 73;
pub const PI_CMD_SPIW: u32 = 74;
pub const PI_CMD_SPIX: u32 = 75;
pub const PI_CMD_SERO: u32 = 76;
pub const PI_CMD_SERC: u32 = 77;
pub const PI_CMD_SERRB: u32 = 78;
pub const PI_CMD_SERWB: u32 = 79;
pub const PI_CMD_SERR: u32 = 80;
pub const PI_CMD_SERW: u32 = 81;
pub const PI_CMD_SERDA: u32 = 82;
pub const PI_CMD_GDC: u32 = 83;
pub const PI_CMD_GPW: u32 = 84;
pub const PI_CMD_HC: u32 = 85;
pub const PI_CMD_HP: u32 = 86;
pub const PI_CMD_CF1: u32 = 87;
pub const PI_CMD_CF2: u32 = 88;
pub const PI_CMD_BI2CC: u32 = 89;
pub const PI_CMD_BI2CO: u32 = 90;
pub const PI_CMD_BI2CZ: u32 = 91;
pub const PI_CMD_I2CZ: u32 = 92;
pub const PI_CMD_WVCHA: u32 = 93;
pub const PI_CMD_SLRI: u32 = 94;
pub const PI_CMD_CGI: u32 = 95;
pub const PI_CMD_CSI: u32 = 96;
pub const PI_CMD_FG: u32 = 97;
pub const PI_CMD_FN: u32 = 98;
pub const PI_CMD_NOIB: u32 = 99;
pub const PI_CMD_WVTXM: u32 = 100;
pub const PI_CMD_WVTAT: u32 = 101;
pub const PI_CMD_PADS: u32 = 102;
pub const PI_CMD_PADG: u32 = 103;
pub const PI_CMD_FO: u32 = 104;
pub const PI_CMD_FC: u32 = 105;
pub const PI_CMD_FR: u32 = 106;
pub const PI_CMD_FW: u32 = 107;
pub const PI_CMD_FS: u32 = 108;
pub const PI_CMD_FL: u32 = 109;
pub const PI_CMD_SHELL: u32 = 110;
pub const PI_CMD_BSPIC: u32 = 111;
pub const PI_CMD_BSPIO: u32 = 112;
pub const PI_CMD_BSPIX: u32 = 113;
pub const PI_CMD_BSCX: u32 = 114;
pub const PI_CMD_EVM: u32 = 115;
pub const PI_CMD_EVT: u32 = 116;
pub const PI_CMD_PROCU: u32 = 117;
pub const PI_CMD_SCRIPT: u32 = 800;
pub const PI_CMD_ADD: u32 = 800;
pub const PI_CMD_AND: u32 = 801;
pub const PI_CMD_CALL: u32 = 802;
pub const PI_CMD_CMDR: u32 = 803;
pub const PI_CMD_CMDW: u32 = 804;
pub const PI_CMD_CMP: u32 = 805;
pub const PI_CMD_DCR: u32 = 806;
pub const PI_CMD_DCRA: u32 = 807;
pub const PI_CMD_DIV: u32 = 808;
pub const PI_CMD_HALT: u32 = 809;
pub const PI_CMD_INR: u32 = 810;
pub const PI_CMD_INRA: u32 = 811;
pub const PI_CMD_JM: u32 = 812;
pub const PI_CMD_JMP: u32 = 813;
pub const PI_CMD_JNZ: u32 = 814;
pub const PI_CMD_JP: u32 = 815;
pub const PI_CMD_JZ: u32 = 816;
pub const PI_CMD_TAG: u32 = 817;
pub const PI_CMD_LD: u32 = 818;
pub const PI_CMD_LDA: u32 = 819;
pub const PI_CMD_LDAB: u32 = 820;
pub const PI_CMD_MLT: u32 = 821;
pub const PI_CMD_MOD: u32 = 822;
pub const PI_CMD_NOP: u32 = 823;
pub const PI_CMD_OR: u32 = 824;
pub const PI_CMD_POP: u32 = 825;
pub const PI_CMD_POPA: u32 = 826;
pub const PI_CMD_PUSH: u32 = 827;
pub const PI_CMD_PUSHA: u32 = 828;
pub const PI_CMD_RET: u32 = 829;
pub const PI_CMD_RL: u32 = 830;
pub const PI_CMD_RLA: u32 = 831;
pub const PI_CMD_RR: u32 = 832;
pub const PI_CMD_RRA: u32 = 833;
pub const PI_CMD_STA: u32 = 834;
pub const PI_CMD_STAB: u32 = 835;
pub const PI_CMD_SUB: u32 = 836;
pub const PI_CMD_SYS: u32 = 837;
pub const PI_CMD_WAIT: u32 = 838;
pub const PI_CMD_X: u32 = 839;
pub const PI_CMD_XA: u32 = 840;
pub const PI_CMD_XOR: u32 = 841;
pub const PI_CMD_EVTWT: u32 = 842;
pub const PI_INIT_FAILED: i32 = -1;
pub const PI_BAD_USER_GPIO: i32 = -2;
pub const PI_BAD_GPIO: i32 = -3;
pub const PI_BAD_MODE: i32 = -4;
pub const PI_BAD_LEVEL: i32 = -5;
pub const PI_BAD_PUD: i32 = -6;
pub const PI_BAD_PULSEWIDTH: i32 = -7;
pub const PI_BAD_DUTYCYCLE: i32 = -8;
pub const PI_BAD_TIMER: i32 = -9;
pub const PI_BAD_MS: i32 = -10;
pub const PI_BAD_TIMETYPE: i32 = -11;
pub const PI_BAD_SECONDS: i32 = -12;
pub const PI_BAD_MICROS: i32 = -13;
pub const PI_TIMER_FAILED: i32 = -14;
pub const PI_BAD_WDOG_TIMEOUT: i32 = -15;
pub const PI_NO_ALERT_FUNC: i32 = -16;
pub const PI_BAD_CLK_PERIPH: i32 = -17;
pub const PI_BAD_CLK_SOURCE: i32 = -18;
pub const PI_BAD_CLK_MICROS: i32 = -19;
pub const PI_BAD_BUF_MILLIS: i32 = -20;
pub const PI_BAD_DUTYRANGE: i32 = -21;
pub const PI_BAD_DUTY_RANGE: i32 = -21;
pub const PI_BAD_SIGNUM: i32 = -22;
pub const PI_BAD_PATHNAME: i32 = -23;
pub const PI_NO_HANDLE: i32 = -24;
pub const PI_BAD_HANDLE: i32 = -25;
pub const PI_BAD_IF_FLAGS: i32 = -26;
pub const PI_BAD_CHANNEL: i32 = -27;
pub const PI_BAD_PRIM_CHANNEL: i32 = -27;
pub const PI_BAD_SOCKET_PORT: i32 = -28;
pub const PI_BAD_FIFO_COMMAND: i32 = -29;
pub const PI_BAD_SECO_CHANNEL: i32 = -30;
pub const PI_NOT_INITIALISED: i32 = -31;
pub const PI_INITIALISED: i32 = -32;
pub const PI_BAD_WAVE_MODE: i32 = -33;
pub const PI_BAD_CFG_INTERNAL: i32 = -34;
pub const PI_BAD_WAVE_BAUD: i32 = -35;
pub const PI_TOO_MANY_PULSES: i32 = -36;
pub const PI_TOO_MANY_CHARS: i32 = -37;
pub const PI_NOT_SERIAL_GPIO: i32 = -38;
pub const PI_BAD_SERIAL_STRUC: i32 = -39;
pub const PI_BAD_SERIAL_BUF: i32 = -40;
pub const PI_NOT_PERMITTED: i32 = -41;
pub const PI_SOME_PERMITTED: i32 = -42;
pub const PI_BAD_WVSC_COMMND: i32 = -43;
pub const PI_BAD_WVSM_COMMND: i32 = -44;
pub const PI_BAD_WVSP_COMMND: i32 = -45;
pub const PI_BAD_PULSELEN: i32 = -46;
pub const PI_BAD_SCRIPT: i32 = -47;
pub const PI_BAD_SCRIPT_ID: i32 = -48;
pub const PI_BAD_SER_OFFSET: i32 = -49;
pub const PI_GPIO_IN_USE: i32 = -50;
pub const PI_BAD_SERIAL_COUNT: i32 = -51;
pub const PI_BAD_PARAM_NUM: i32 = -52;
pub const PI_DUP_TAG: i32 = -53;
pub const PI_TOO_MANY_TAGS: i32 = -54;
pub const PI_BAD_SCRIPT_CMD: i32 = -55;
pub const PI_BAD_VAR_NUM: i32 = -56;
pub const PI_NO_SCRIPT_ROOM: i32 = -57;
pub const PI_NO_MEMORY: i32 = -58;
pub const PI_SOCK_READ_FAILED: i32 = -59;
pub const PI_SOCK_WRIT_FAILED: i32 = -60;
pub const PI_TOO_MANY_PARAM: i32 = -61;
pub const PI_NOT_HALTED: i32 = -62;
pub const PI_SCRIPT_NOT_READY: i32 = -62;
pub const PI_BAD_TAG: i32 = -63;
pub const PI_BAD_MICS_DELAY: i32 = -64;
pub const PI_BAD_MILS_DELAY: i32 = -65;
pub const PI_BAD_WAVE_ID: i32 = -66;
pub const PI_TOO_MANY_CBS: i32 = -67;
pub const PI_TOO_MANY_OOL: i32 = -68;
pub const PI_EMPTY_WAVEFORM: i32 = -69;
pub const PI_NO_WAVEFORM_ID: i32 = -70;
pub const PI_I2C_OPEN_FAILED: i32 = -71;
pub const PI_SER_OPEN_FAILED: i32 = -72;
pub const PI_SPI_OPEN_FAILED: i32 = -73;
pub const PI_BAD_I2C_BUS: i32 = -74;
pub const PI_BAD_I2C_ADDR: i32 = -75;
pub const PI_BAD_SPI_CHANNEL: i32 = -76;
pub const PI_BAD_FLAGS: i32 = -77;
pub const PI_BAD_SPI_SPEED: i32 = -78;
pub const PI_BAD_SER_DEVICE: i32 = -79;
pub const PI_BAD_SER_SPEED: i32 = -80;
pub const PI_BAD_PARAM: i32 = -81;
pub const PI_I2C_WRITE_FAILED: i32 = -82;
pub const PI_I2C_READ_FAILED: i32 = -83;
pub const PI_BAD_SPI_COUNT: i32 = -84;
pub const PI_SER_WRITE_FAILED: i32 = -85;
pub const PI_SER_READ_FAILED: i32 = -86;
pub const PI_SER_READ_NO_DATA: i32 = -87;
pub const PI_UNKNOWN_COMMAND: i32 = -88;
pub const PI_SPI_XFER_FAILED: i32 = -89;
pub const PI_BAD_POINTER: i32 = -90;
pub const PI_NO_AUX_SPI: i32 = -91;
pub const PI_NOT_PWM_GPIO: i32 = -92;
pub const PI_NOT_SERVO_GPIO: i32 = -93;
pub const PI_NOT_HCLK_GPIO: i32 = -94;
pub const PI_NOT_HPWM_GPIO: i32 = -95;
pub const PI_BAD_HPWM_FREQ: i32 = -96;
pub const PI_BAD_HPWM_DUTY: i32 = -97;
pub const PI_BAD_HCLK_FREQ: i32 = -98;
pub const PI_BAD_HCLK_PASS: i32 = -99;
pub const PI_HPWM_ILLEGAL: i32 = -100;
pub const PI_BAD_DATABITS: i32 = -101;
pub const PI_BAD_STOPBITS: i32 = -102;
pub const PI_MSG_TOOBIG: i32 = -103;
pub const PI_BAD_MALLOC_MODE: i32 = -104;
pub const PI_TOO_MANY_SEGS: i32 = -105;
pub const PI_BAD_I2C_SEG: i32 = -106;
pub const PI_BAD_SMBUS_CMD: i32 = -107;
pub const PI_NOT_I2C_GPIO: i32 = -108;
pub const PI_BAD_I2C_WLEN: i32 = -109;
pub const PI_BAD_I2C_RLEN: i32 = -110;
pub const PI_BAD_I2C_CMD: i32 = -111;
pub const PI_BAD_I2C_BAUD: i32 = -112;
pub const PI_CHAIN_LOOP_CNT: i32 = -113;
pub const PI_BAD_CHAIN_LOOP: i32 = -114;
pub const PI_CHAIN_COUNTER: i32 = -115;
pub const PI_BAD_CHAIN_CMD: i32 = -116;
pub const PI_BAD_CHAIN_DELAY: i32 = -117;
pub const PI_CHAIN_NESTING: i32 = -118;
pub const PI_CHAIN_TOO_BIG: i32 = -119;
pub const PI_DEPRECATED: i32 = -120;
pub const PI_BAD_SER_INVERT: i32 = -121;
pub const PI_BAD_EDGE: i32 = -122;
pub const PI_BAD_ISR_INIT: i32 = -123;
pub const PI_BAD_FOREVER: i32 = -124;
pub const PI_BAD_FILTER: i32 = -125;
pub const PI_BAD_PAD: i32 = -126;
pub const PI_BAD_STRENGTH: i32 = -127;
pub const PI_FIL_OPEN_FAILED: i32 = -128;
pub const PI_BAD_FILE_MODE: i32 = -129;
pub const PI_BAD_FILE_FLAG: i32 = -130;
pub const PI_BAD_FILE_READ: i32 = -131;
pub const PI_BAD_FILE_WRITE: i32 = -132;
pub const PI_FILE_NOT_ROPEN: i32 = -133;
pub const PI_FILE_NOT_WOPEN: i32 = -134;
pub const PI_BAD_FILE_SEEK: i32 = -135;
pub const PI_NO_FILE_MATCH: i32 = -136;
pub const PI_NO_FILE_ACCESS: i32 = -137;
pub const PI_FILE_IS_A_DIR: i32 = -138;
pub const PI_BAD_SHELL_STATUS: i32 = -139;
pub const PI_BAD_SCRIPT_NAME: i32 = -140;
pub const PI_BAD_SPI_BAUD: i32 = -141;
pub const PI_NOT_SPI_GPIO: i32 = -142;
pub const PI_BAD_EVENT_ID: i32 = -143;
pub const PI_CMD_INTERRUPTED: i32 = -144;
pub const PI_PIGIF_ERR_0: i32 = -2000;
pub const PI_PIGIF_ERR_99: i32 = -2099;
pub const PI_CUSTOM_ERR_0: i32 = -3000;
pub const PI_CUSTOM_ERR_999: i32 = -3999;
pub const PI_DEFAULT_BUFFER_MILLIS: u32 = 120;
pub const PI_DEFAULT_CLK_MICROS: u32 = 5;
pub const PI_DEFAULT_CLK_PERIPHERAL: u32 = 1;
pub const PI_DEFAULT_IF_FLAGS: u32 = 0;
pub const PI_DEFAULT_FOREGROUND: u32 = 0;
pub const PI_DEFAULT_DMA_CHANNEL: u32 = 14;
pub const PI_DEFAULT_DMA_PRIMARY_CHANNEL: u32 = 14;
pub const PI_DEFAULT_DMA_SECONDARY_CHANNEL: u32 = 6;
pub const PI_DEFAULT_SOCKET_PORT: u32 = 8888;
pub const PI_DEFAULT_SOCKET_PORT_STR: &'static [u8; 5usize] = b"8888\0";
pub const PI_DEFAULT_SOCKET_ADDR_STR: &'static [u8; 10usize] = b"127.0.0.1\0";
pub const PI_DEFAULT_UPDATE_MASK_UNKNOWN: u32 = 268435452;
pub const PI_DEFAULT_UPDATE_MASK_B1: u32 = 65523603;
pub const PI_DEFAULT_UPDATE_MASK_A_B2: u32 = 4224176028;
pub const PI_DEFAULT_UPDATE_MASK_APLUS_BPLUS: u64 = 141046994436092;
pub const PI_DEFAULT_UPDATE_MASK_ZERO: u64 = 140737756790780;
pub const PI_DEFAULT_UPDATE_MASK_PI2B: u64 = 141046994436092;
pub const PI_DEFAULT_UPDATE_MASK_PI3B: u32 = 268435452;
pub const PI_DEFAULT_UPDATE_MASK_COMPUTE: u64 = 281474976710655;
pub const PI_DEFAULT_MEM_ALLOC_MODE: u32 = 0;
pub const PI_DEFAULT_CFG_INTERNALS: u32 = 0;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __quad_t = ::std::os::raw::c_longlong;
pub type __u_quad_t = ::std::os::raw::c_ulonglong;
pub type __dev_t = __u_quad_t;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = __u_quad_t;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = __quad_t;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = __u_quad_t;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = __quad_t;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = __u_quad_t;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = __u_quad_t;
pub type __fsword_t = ::std::os::raw::c_int;
pub type __ssize_t = ::std::os::raw::c_int;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        8usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).__sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(__sched_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sched_param() {
    assert_eq!(
        ::std::mem::size_of::<__sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(__sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<__sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(__sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sched_param>())).__sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sched_param),
            "::",
            stringify!(__sched_priority)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 32usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        44usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        16usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        4usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        116usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        4usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: __locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "\u{1}__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 36usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 9usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        36usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        4usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 24usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __kind: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: pthread_mutex_t___pthread_mutex_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 {
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_slist_t,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>())).__spins
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>())).__list
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__kind as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__futex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__total_seq as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__wakeup_seq as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__woken_seq as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__mutex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__nwaiters as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__broadcast_seq as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__broadcast_seq)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __flags: ::std::os::raw::c_uchar,
    pub __shared: ::std::os::raw::c_uchar,
    pub __pad1: ::std::os::raw::c_uchar,
    pub __pad2: ::std::os::raw::c_uchar,
    pub __writer: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__readers_wakeup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer_wakeup as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers_queued
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_writers_queued
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__flags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__shared as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad1 as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad2 as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 20usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        20usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type __jmp_buf = [::std::os::raw::c_int; 64usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = u32;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = u32;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = u32;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = u32;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = u32;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = u32;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = u32;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        16usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        4usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = u32;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = u32;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        264usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        280usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpioHeader_t {
    pub func: u16,
    pub size: u16,
}
#[test]
fn bindgen_test_layout_gpioHeader_t() {
    assert_eq!(
        ::std::mem::size_of::<gpioHeader_t>(),
        4usize,
        concat!("Size of: ", stringify!(gpioHeader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gpioHeader_t>(),
        2usize,
        concat!("Alignment of ", stringify!(gpioHeader_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioHeader_t>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioHeader_t),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioHeader_t>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioHeader_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpioExtent_t {
    pub size: usize,
    pub ptr: *mut ::std::os::raw::c_void,
    pub data: u32,
}
#[test]
fn bindgen_test_layout_gpioExtent_t() {
    assert_eq!(
        ::std::mem::size_of::<gpioExtent_t>(),
        12usize,
        concat!("Size of: ", stringify!(gpioExtent_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gpioExtent_t>(),
        4usize,
        concat!("Alignment of ", stringify!(gpioExtent_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioExtent_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioExtent_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioExtent_t>())).ptr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioExtent_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioExtent_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioExtent_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpioSample_t {
    pub tick: u32,
    pub level: u32,
}
#[test]
fn bindgen_test_layout_gpioSample_t() {
    assert_eq!(
        ::std::mem::size_of::<gpioSample_t>(),
        8usize,
        concat!("Size of: ", stringify!(gpioSample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gpioSample_t>(),
        4usize,
        concat!("Alignment of ", stringify!(gpioSample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioSample_t>())).tick as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioSample_t),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioSample_t>())).level as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioSample_t),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpioReport_t {
    pub seqno: u16,
    pub flags: u16,
    pub tick: u32,
    pub level: u32,
}
#[test]
fn bindgen_test_layout_gpioReport_t() {
    assert_eq!(
        ::std::mem::size_of::<gpioReport_t>(),
        12usize,
        concat!("Size of: ", stringify!(gpioReport_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gpioReport_t>(),
        4usize,
        concat!("Alignment of ", stringify!(gpioReport_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioReport_t>())).seqno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioReport_t),
            "::",
            stringify!(seqno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioReport_t>())).flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioReport_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioReport_t>())).tick as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioReport_t),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioReport_t>())).level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioReport_t),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpioPulse_t {
    pub gpioOn: u32,
    pub gpioOff: u32,
    pub usDelay: u32,
}
#[test]
fn bindgen_test_layout_gpioPulse_t() {
    assert_eq!(
        ::std::mem::size_of::<gpioPulse_t>(),
        12usize,
        concat!("Size of: ", stringify!(gpioPulse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gpioPulse_t>(),
        4usize,
        concat!("Alignment of ", stringify!(gpioPulse_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioPulse_t>())).gpioOn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioPulse_t),
            "::",
            stringify!(gpioOn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioPulse_t>())).gpioOff as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioPulse_t),
            "::",
            stringify!(gpioOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gpioPulse_t>())).usDelay as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gpioPulse_t),
            "::",
            stringify!(usDelay)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawWave_t {
    pub gpioOn: u32,
    pub gpioOff: u32,
    pub usDelay: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_rawWave_t() {
    assert_eq!(
        ::std::mem::size_of::<rawWave_t>(),
        16usize,
        concat!("Size of: ", stringify!(rawWave_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rawWave_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rawWave_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWave_t>())).gpioOn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWave_t),
            "::",
            stringify!(gpioOn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWave_t>())).gpioOff as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWave_t),
            "::",
            stringify!(gpioOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWave_t>())).usDelay as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWave_t),
            "::",
            stringify!(usDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWave_t>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWave_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawWaveInfo_t {
    pub botCB: u16,
    pub topCB: u16,
    pub botOOL: u16,
    pub topOOL: u16,
    pub deleted: u16,
    pub numCB: u16,
    pub numBOOL: u16,
    pub numTOOL: u16,
}
#[test]
fn bindgen_test_layout_rawWaveInfo_t() {
    assert_eq!(
        ::std::mem::size_of::<rawWaveInfo_t>(),
        16usize,
        concat!("Size of: ", stringify!(rawWaveInfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rawWaveInfo_t>(),
        2usize,
        concat!("Alignment of ", stringify!(rawWaveInfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWaveInfo_t>())).botCB as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWaveInfo_t),
            "::",
            stringify!(botCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWaveInfo_t>())).topCB as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWaveInfo_t),
            "::",
            stringify!(topCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWaveInfo_t>())).botOOL as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWaveInfo_t),
            "::",
            stringify!(botOOL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWaveInfo_t>())).topOOL as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWaveInfo_t),
            "::",
            stringify!(topOOL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWaveInfo_t>())).deleted as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWaveInfo_t),
            "::",
            stringify!(deleted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWaveInfo_t>())).numCB as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWaveInfo_t),
            "::",
            stringify!(numCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWaveInfo_t>())).numBOOL as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWaveInfo_t),
            "::",
            stringify!(numBOOL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawWaveInfo_t>())).numTOOL as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(rawWaveInfo_t),
            "::",
            stringify!(numTOOL)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawSPI_t {
    pub clk: ::std::os::raw::c_int,
    pub mosi: ::std::os::raw::c_int,
    pub miso: ::std::os::raw::c_int,
    pub ss_pol: ::std::os::raw::c_int,
    pub ss_us: ::std::os::raw::c_int,
    pub clk_pol: ::std::os::raw::c_int,
    pub clk_pha: ::std::os::raw::c_int,
    pub clk_us: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rawSPI_t() {
    assert_eq!(
        ::std::mem::size_of::<rawSPI_t>(),
        32usize,
        concat!("Size of: ", stringify!(rawSPI_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rawSPI_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rawSPI_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawSPI_t>())).clk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rawSPI_t),
            "::",
            stringify!(clk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawSPI_t>())).mosi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rawSPI_t),
            "::",
            stringify!(mosi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawSPI_t>())).miso as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rawSPI_t),
            "::",
            stringify!(miso)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawSPI_t>())).ss_pol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rawSPI_t),
            "::",
            stringify!(ss_pol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawSPI_t>())).ss_us as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rawSPI_t),
            "::",
            stringify!(ss_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawSPI_t>())).clk_pol as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rawSPI_t),
            "::",
            stringify!(clk_pol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawSPI_t>())).clk_pha as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rawSPI_t),
            "::",
            stringify!(clk_pha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawSPI_t>())).clk_us as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rawSPI_t),
            "::",
            stringify!(clk_us)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawCbs_t {
    pub info: u32,
    pub src: u32,
    pub dst: u32,
    pub length: u32,
    pub stride: u32,
    pub next: u32,
    pub pad: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_rawCbs_t() {
    assert_eq!(
        ::std::mem::size_of::<rawCbs_t>(),
        32usize,
        concat!("Size of: ", stringify!(rawCbs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rawCbs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rawCbs_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawCbs_t>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rawCbs_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawCbs_t>())).src as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rawCbs_t),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawCbs_t>())).dst as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rawCbs_t),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawCbs_t>())).length as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rawCbs_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawCbs_t>())).stride as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rawCbs_t),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawCbs_t>())).next as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rawCbs_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rawCbs_t>())).pad as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rawCbs_t),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pi_i2c_msg_t {
    pub addr: u16,
    pub flags: u16,
    pub len: u16,
    pub buf: *mut u8,
}
#[test]
fn bindgen_test_layout_pi_i2c_msg_t() {
    assert_eq!(
        ::std::mem::size_of::<pi_i2c_msg_t>(),
        12usize,
        concat!("Size of: ", stringify!(pi_i2c_msg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pi_i2c_msg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pi_i2c_msg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pi_i2c_msg_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pi_i2c_msg_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pi_i2c_msg_t>())).flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pi_i2c_msg_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pi_i2c_msg_t>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pi_i2c_msg_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pi_i2c_msg_t>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pi_i2c_msg_t),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bsc_xfer_t {
    pub control: u32,
    pub rxCnt: ::std::os::raw::c_int,
    pub rxBuf: [::std::os::raw::c_char; 512usize],
    pub txCnt: ::std::os::raw::c_int,
    pub txBuf: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout_bsc_xfer_t() {
    assert_eq!(
        ::std::mem::size_of::<bsc_xfer_t>(),
        1036usize,
        concat!("Size of: ", stringify!(bsc_xfer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bsc_xfer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(bsc_xfer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bsc_xfer_t>())).control as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bsc_xfer_t),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bsc_xfer_t>())).rxCnt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bsc_xfer_t),
            "::",
            stringify!(rxCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bsc_xfer_t>())).rxBuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bsc_xfer_t),
            "::",
            stringify!(rxBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bsc_xfer_t>())).txCnt as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(bsc_xfer_t),
            "::",
            stringify!(txCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bsc_xfer_t>())).txBuf as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(bsc_xfer_t),
            "::",
            stringify!(txBuf)
        )
    );
}
pub type gpioAlertFunc_t = ::std::option::Option<
    unsafe extern "C" fn(gpio: ::std::os::raw::c_int, level: ::std::os::raw::c_int, tick: u32),
>;
pub type gpioAlertFuncEx_t = ::std::option::Option<
    unsafe extern "C" fn(
        gpio: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
        tick: u32,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type eventFunc_t =
    ::std::option::Option<unsafe extern "C" fn(event: ::std::os::raw::c_int, tick: u32)>;
pub type eventFuncEx_t = ::std::option::Option<
    unsafe extern "C" fn(
        event: ::std::os::raw::c_int,
        tick: u32,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type gpioISRFunc_t = ::std::option::Option<
    unsafe extern "C" fn(gpio: ::std::os::raw::c_int, level: ::std::os::raw::c_int, tick: u32),
>;
pub type gpioISRFuncEx_t = ::std::option::Option<
    unsafe extern "C" fn(
        gpio: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
        tick: u32,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type gpioTimerFunc_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type gpioTimerFuncEx_t =
    ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void)>;
pub type gpioSignalFunc_t =
    ::std::option::Option<unsafe extern "C" fn(signum: ::std::os::raw::c_int)>;
pub type gpioSignalFuncEx_t = ::std::option::Option<
    unsafe extern "C" fn(signum: ::std::os::raw::c_int, userdata: *mut ::std::os::raw::c_void),
>;
pub type gpioGetSamplesFunc_t = ::std::option::Option<
    unsafe extern "C" fn(samples: *const gpioSample_t, numSamples: ::std::os::raw::c_int),
>;
pub type gpioGetSamplesFuncEx_t = ::std::option::Option<
    unsafe extern "C" fn(
        samples: *const gpioSample_t,
        numSamples: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type gpioThreadFunc_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn gpioInitialise() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioTerminate();
}
extern "C" {
    pub fn gpioSetMode(
        gpio: ::std::os::raw::c_uint,
        mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioGetMode(gpio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetPullUpDown(
        gpio: ::std::os::raw::c_uint,
        pud: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioRead(gpio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWrite(
        gpio: ::std::os::raw::c_uint,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioPWM(
        user_gpio: ::std::os::raw::c_uint,
        dutycycle: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioGetPWMdutycycle(user_gpio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetPWMrange(
        user_gpio: ::std::os::raw::c_uint,
        range: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioGetPWMrange(user_gpio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioGetPWMrealRange(user_gpio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetPWMfrequency(
        user_gpio: ::std::os::raw::c_uint,
        frequency: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioGetPWMfrequency(user_gpio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioServo(
        user_gpio: ::std::os::raw::c_uint,
        pulsewidth: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioGetServoPulsewidth(user_gpio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetAlertFunc(
        user_gpio: ::std::os::raw::c_uint,
        f: gpioAlertFunc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetAlertFuncEx(
        user_gpio: ::std::os::raw::c_uint,
        f: gpioAlertFuncEx_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetISRFunc(
        gpio: ::std::os::raw::c_uint,
        edge: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_int,
        f: gpioISRFunc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetISRFuncEx(
        gpio: ::std::os::raw::c_uint,
        edge: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_int,
        f: gpioISRFuncEx_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioNotifyOpen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioNotifyOpenWithSize(bufSize: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioNotifyBegin(handle: ::std::os::raw::c_uint, bits: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioNotifyPause(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioNotifyClose(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveClear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveAddNew() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveAddGeneric(
        numPulses: ::std::os::raw::c_uint,
        pulses: *mut gpioPulse_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveAddSerial(
        user_gpio: ::std::os::raw::c_uint,
        baud: ::std::os::raw::c_uint,
        data_bits: ::std::os::raw::c_uint,
        stop_bits: ::std::os::raw::c_uint,
        offset: ::std::os::raw::c_uint,
        numBytes: ::std::os::raw::c_uint,
        str: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveCreate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveDelete(wave_id: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveTxSend(
        wave_id: ::std::os::raw::c_uint,
        wave_mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveChain(
        buf: *mut ::std::os::raw::c_char,
        bufSize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveTxAt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveTxBusy() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveTxStop() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetMicros() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetHighMicros() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetMaxMicros() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetPulses() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetHighPulses() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetMaxPulses() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetCbs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetHighCbs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWaveGetMaxCbs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSerialReadOpen(
        user_gpio: ::std::os::raw::c_uint,
        baud: ::std::os::raw::c_uint,
        data_bits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSerialReadInvert(
        user_gpio: ::std::os::raw::c_uint,
        invert: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSerialRead(
        user_gpio: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_void,
        bufSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSerialReadClose(user_gpio: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cOpen(
        i2cBus: ::std::os::raw::c_uint,
        i2cAddr: ::std::os::raw::c_uint,
        i2cFlags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cClose(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cWriteQuick(
        handle: ::std::os::raw::c_uint,
        bit: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cWriteByte(
        handle: ::std::os::raw::c_uint,
        bVal: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cReadByte(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cWriteByteData(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
        bVal: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cWriteWordData(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
        wVal: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cReadByteData(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cReadWordData(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cProcessCall(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
        wVal: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cWriteBlockData(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cReadBlockData(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cBlockProcessCall(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cReadI2CBlockData(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cWriteI2CBlockData(
        handle: ::std::os::raw::c_uint,
        i2cReg: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cReadDevice(
        handle: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cWriteDevice(
        handle: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cSwitchCombined(setting: ::std::os::raw::c_int);
}
extern "C" {
    pub fn i2cSegments(
        handle: ::std::os::raw::c_uint,
        segs: *mut pi_i2c_msg_t,
        numSegs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i2cZip(
        handle: ::std::os::raw::c_uint,
        inBuf: *mut ::std::os::raw::c_char,
        inLen: ::std::os::raw::c_uint,
        outBuf: *mut ::std::os::raw::c_char,
        outLen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bbI2COpen(
        SDA: ::std::os::raw::c_uint,
        SCL: ::std::os::raw::c_uint,
        baud: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bbI2CClose(SDA: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bbI2CZip(
        SDA: ::std::os::raw::c_uint,
        inBuf: *mut ::std::os::raw::c_char,
        inLen: ::std::os::raw::c_uint,
        outBuf: *mut ::std::os::raw::c_char,
        outLen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bscXfer(bsc_xfer: *mut bsc_xfer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bbSPIOpen(
        CS: ::std::os::raw::c_uint,
        MISO: ::std::os::raw::c_uint,
        MOSI: ::std::os::raw::c_uint,
        SCLK: ::std::os::raw::c_uint,
        baud: ::std::os::raw::c_uint,
        spiFlags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bbSPIClose(CS: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bbSPIXfer(
        CS: ::std::os::raw::c_uint,
        inBuf: *mut ::std::os::raw::c_char,
        outBuf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spiOpen(
        spiChan: ::std::os::raw::c_uint,
        baud: ::std::os::raw::c_uint,
        spiFlags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spiClose(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spiRead(
        handle: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spiWrite(
        handle: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spiXfer(
        handle: ::std::os::raw::c_uint,
        txBuf: *mut ::std::os::raw::c_char,
        rxBuf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serOpen(
        sertty: *mut ::std::os::raw::c_char,
        baud: ::std::os::raw::c_uint,
        serFlags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serClose(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serWriteByte(
        handle: ::std::os::raw::c_uint,
        bVal: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serReadByte(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serWrite(
        handle: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serRead(
        handle: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serDataAvailable(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioTrigger(
        user_gpio: ::std::os::raw::c_uint,
        pulseLen: ::std::os::raw::c_uint,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetWatchdog(
        user_gpio: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioNoiseFilter(
        user_gpio: ::std::os::raw::c_uint,
        steady: ::std::os::raw::c_uint,
        active: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioGlitchFilter(
        user_gpio: ::std::os::raw::c_uint,
        steady: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetGetSamplesFunc(f: gpioGetSamplesFunc_t, bits: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetGetSamplesFuncEx(
        f: gpioGetSamplesFuncEx_t,
        bits: u32,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetTimerFunc(
        timer: ::std::os::raw::c_uint,
        millis: ::std::os::raw::c_uint,
        f: gpioTimerFunc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetTimerFuncEx(
        timer: ::std::os::raw::c_uint,
        millis: ::std::os::raw::c_uint,
        f: gpioTimerFuncEx_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioStartThread(
        f: gpioThreadFunc_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pthread_t;
}
extern "C" {
    pub fn gpioStopThread(pth: *mut pthread_t);
}
extern "C" {
    pub fn gpioStoreScript(script: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioRunScript(
        script_id: ::std::os::raw::c_uint,
        numPar: ::std::os::raw::c_uint,
        param: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioUpdateScript(
        script_id: ::std::os::raw::c_uint,
        numPar: ::std::os::raw::c_uint,
        param: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioScriptStatus(
        script_id: ::std::os::raw::c_uint,
        param: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioStopScript(script_id: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioDeleteScript(script_id: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetSignalFunc(
        signum: ::std::os::raw::c_uint,
        f: gpioSignalFunc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetSignalFuncEx(
        signum: ::std::os::raw::c_uint,
        f: gpioSignalFuncEx_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioRead_Bits_0_31() -> u32;
}
extern "C" {
    pub fn gpioRead_Bits_32_53() -> u32;
}
extern "C" {
    pub fn gpioWrite_Bits_0_31_Clear(bits: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWrite_Bits_32_53_Clear(bits: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWrite_Bits_0_31_Set(bits: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioWrite_Bits_32_53_Set(bits: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioHardwareClock(
        gpio: ::std::os::raw::c_uint,
        clkfreq: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioHardwarePWM(
        gpio: ::std::os::raw::c_uint,
        PWMfreq: ::std::os::raw::c_uint,
        PWMduty: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioTime(
        timetype: ::std::os::raw::c_uint,
        seconds: *mut ::std::os::raw::c_int,
        micros: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSleep(
        timetype: ::std::os::raw::c_uint,
        seconds: ::std::os::raw::c_int,
        micros: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioDelay(micros: u32) -> u32;
}
extern "C" {
    pub fn gpioTick() -> u32;
}
extern "C" {
    pub fn gpioHardwareRevision() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gpioVersion() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gpioGetPad(pad: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioSetPad(
        pad: ::std::os::raw::c_uint,
        padStrength: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eventMonitor(handle: ::std::os::raw::c_uint, bits: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eventSetFunc(event: ::std::os::raw::c_uint, f: eventFunc_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eventSetFuncEx(
        event: ::std::os::raw::c_uint,
        f: eventFuncEx_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eventTrigger(event: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shell(
        scriptName: *mut ::std::os::raw::c_char,
        scriptString: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileOpen(
        file: *mut ::std::os::raw::c_char,
        mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileClose(handle: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileWrite(
        handle: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileRead(
        handle: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileSeek(
        handle: ::std::os::raw::c_uint,
        seekOffset: i32,
        seekFrom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileList(
        fpat: *mut ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgBufferSize(cfgMillis: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgClock(
        cfgMicros: ::std::os::raw::c_uint,
        cfgPeripheral: ::std::os::raw::c_uint,
        cfgSource: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgDMAchannel(DMAchannel: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgDMAchannels(
        primaryChannel: ::std::os::raw::c_uint,
        secondaryChannel: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgPermissions(updateMask: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgSocketPort(port: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgInterfaces(ifFlags: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgMemAlloc(memAllocMode: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgNetAddr(
        numSockAddr: ::std::os::raw::c_int,
        sockAddr: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgInternals(
        cfgWhat: ::std::os::raw::c_uint,
        cfgVal: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCfgGetInternals() -> u32;
}
extern "C" {
    pub fn gpioCfgSetInternals(cfgVal: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCustom1(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        argx: *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpioCustom2(
        arg1: ::std::os::raw::c_uint,
        argx: *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_uint,
        retBuf: *mut ::std::os::raw::c_char,
        retMax: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rawWaveAddSPI(
        spi: *mut rawSPI_t,
        offset: ::std::os::raw::c_uint,
        spiSS: ::std::os::raw::c_uint,
        buf: *mut ::std::os::raw::c_char,
        spiTxBits: ::std::os::raw::c_uint,
        spiBitFirst: ::std::os::raw::c_uint,
        spiBitLast: ::std::os::raw::c_uint,
        spiBits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rawWaveAddGeneric(
        numPulses: ::std::os::raw::c_uint,
        pulses: *mut rawWave_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rawWaveCB() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rawWaveCBAdr(cbNum: ::std::os::raw::c_int) -> *mut rawCbs_t;
}
extern "C" {
    pub fn rawWaveGetOOL(pos: ::std::os::raw::c_int) -> u32;
}
extern "C" {
    pub fn rawWaveSetOOL(pos: ::std::os::raw::c_int, lVal: u32);
}
extern "C" {
    pub fn rawWaveGetOut(pos: ::std::os::raw::c_int) -> u32;
}
extern "C" {
    pub fn rawWaveSetOut(pos: ::std::os::raw::c_int, lVal: u32);
}
extern "C" {
    pub fn rawWaveGetIn(pos: ::std::os::raw::c_int) -> u32;
}
extern "C" {
    pub fn rawWaveSetIn(pos: ::std::os::raw::c_int, lVal: u32);
}
extern "C" {
    pub fn rawWaveInfo(wave_id: ::std::os::raw::c_int) -> rawWaveInfo_t;
}
extern "C" {
    pub fn getBitInBytes(
        bitPos: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        numBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putBitInBytes(
        bitPos: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        bit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn time_time() -> f64;
}
extern "C" {
    pub fn time_sleep(seconds: f64);
}
extern "C" {
    pub fn rawDumpWave();
}
extern "C" {
    pub fn rawDumpScript(script_id: ::std::os::raw::c_uint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
