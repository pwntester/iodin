// This file is generated by rust-protobuf 2.1.5. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub version: u32,
    pub command: Request_Command,
    pub timeout: u32,
    pub arg_uint: u32,
    pub arg_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // uint32 version = 1;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    pub fn get_version(&self) -> u32 {
        self.version
    }

    // .iodin.Request.Command command = 2;

    pub fn clear_command(&mut self) {
        self.command = Request_Command::INVALID;
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: Request_Command) {
        self.command = v;
    }

    pub fn get_command(&self) -> Request_Command {
        self.command
    }

    // uint32 timeout = 3;

    pub fn clear_timeout(&mut self) {
        self.timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: u32) {
        self.timeout = v;
    }

    pub fn get_timeout(&self) -> u32 {
        self.timeout
    }

    // uint32 arg_uint = 4;

    pub fn clear_arg_uint(&mut self) {
        self.arg_uint = 0;
    }

    // Param is passed by value, moved
    pub fn set_arg_uint(&mut self, v: u32) {
        self.arg_uint = v;
    }

    pub fn get_arg_uint(&self) -> u32 {
        self.arg_uint
    }

    // bytes arg_bytes = 5;

    pub fn clear_arg_bytes(&mut self) {
        self.arg_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_arg_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.arg_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_arg_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.arg_bytes
    }

    // Take field
    pub fn take_arg_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.arg_bytes, ::std::vec::Vec::new())
    }

    pub fn get_arg_bytes(&self) -> &[u8] {
        &self.arg_bytes
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.command, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.timeout = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.arg_uint = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.arg_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.command != Request_Command::INVALID {
            my_size += ::protobuf::rt::enum_size(2, self.command);
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.arg_uint != 0 {
            my_size += ::protobuf::rt::value_size(4, self.arg_uint, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.arg_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.arg_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.command != Request_Command::INVALID {
            os.write_enum(2, self.command.value())?;
        }
        if self.timeout != 0 {
            os.write_uint32(3, self.timeout)?;
        }
        if self.arg_uint != 0 {
            os.write_uint32(4, self.arg_uint)?;
        }
        if !self.arg_bytes.is_empty() {
            os.write_bytes(5, &self.arg_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &Request| { &m.version },
                    |m: &mut Request| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Request_Command>>(
                    "command",
                    |m: &Request| { &m.command },
                    |m: &mut Request| { &mut m.command },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "timeout",
                    |m: &Request| { &m.timeout },
                    |m: &mut Request| { &mut m.timeout },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "arg_uint",
                    |m: &Request| { &m.arg_uint },
                    |m: &mut Request| { &mut m.arg_uint },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "arg_bytes",
                    |m: &Request| { &m.arg_bytes },
                    |m: &mut Request| { &mut m.arg_bytes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.clear_version();
        self.clear_command();
        self.clear_timeout();
        self.clear_arg_uint();
        self.clear_arg_bytes();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Request_Command {
    INVALID = 0,
    MDB_OPEN = 1,
    MDB_RESET = 2,
    MDB_TX = 3,
    STOP = 100,
}

impl ::protobuf::ProtobufEnum for Request_Command {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Request_Command> {
        match value {
            0 => ::std::option::Option::Some(Request_Command::INVALID),
            1 => ::std::option::Option::Some(Request_Command::MDB_OPEN),
            2 => ::std::option::Option::Some(Request_Command::MDB_RESET),
            3 => ::std::option::Option::Some(Request_Command::MDB_TX),
            100 => ::std::option::Option::Some(Request_Command::STOP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Request_Command] = &[
            Request_Command::INVALID,
            Request_Command::MDB_OPEN,
            Request_Command::MDB_RESET,
            Request_Command::MDB_TX,
            Request_Command::STOP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Request_Command", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Request_Command {
}

impl ::std::default::Default for Request_Command {
    fn default() -> Self {
        Request_Command::INVALID
    }
}

impl ::protobuf::reflect::ProtobufValue for Request_Command {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub version: u32,
    pub status: Response_Status,
    pub error: ::std::string::String,
    pub data_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // uint32 version = 1;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    pub fn get_version(&self) -> u32 {
        self.version
    }

    // .iodin.Response.Status status = 2;

    pub fn clear_status(&mut self) {
        self.status = Response_Status::INVALID;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Response_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> Response_Status {
        self.status
    }

    // string error = 3;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    pub fn get_error(&self) -> &str {
        &self.error
    }

    // bytes data_bytes = 4;

    pub fn clear_data_bytes(&mut self) {
        self.data_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data_bytes
    }

    // Take field
    pub fn take_data_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data_bytes, ::std::vec::Vec::new())
    }

    pub fn get_data_bytes(&self) -> &[u8] {
        &self.data_bytes
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.status != Response_Status::INVALID {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error);
        }
        if !self.data_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.status != Response_Status::INVALID {
            os.write_enum(2, self.status.value())?;
        }
        if !self.error.is_empty() {
            os.write_string(3, &self.error)?;
        }
        if !self.data_bytes.is_empty() {
            os.write_bytes(4, &self.data_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &Response| { &m.version },
                    |m: &mut Response| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Response_Status>>(
                    "status",
                    |m: &Response| { &m.status },
                    |m: &mut Response| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &Response| { &m.error },
                    |m: &mut Response| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data_bytes",
                    |m: &Response| { &m.data_bytes },
                    |m: &mut Response| { &mut m.data_bytes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Response>(
                    "Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Response {
        static mut instance: ::protobuf::lazy::Lazy<Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Response,
        };
        unsafe {
            instance.get(Response::new)
        }
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.clear_version();
        self.clear_status();
        self.clear_error();
        self.clear_data_bytes();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Response_Status {
    INVALID = 0,
    OK = 1,
    ERR_INPUT = 2,
    ERR_INTERNAL = 3,
    ERR_CHECKSUM = 4,
    ERR_TIMEOUT = 5,
    ERR_HARDWARE = 6,
}

impl ::protobuf::ProtobufEnum for Response_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Response_Status> {
        match value {
            0 => ::std::option::Option::Some(Response_Status::INVALID),
            1 => ::std::option::Option::Some(Response_Status::OK),
            2 => ::std::option::Option::Some(Response_Status::ERR_INPUT),
            3 => ::std::option::Option::Some(Response_Status::ERR_INTERNAL),
            4 => ::std::option::Option::Some(Response_Status::ERR_CHECKSUM),
            5 => ::std::option::Option::Some(Response_Status::ERR_TIMEOUT),
            6 => ::std::option::Option::Some(Response_Status::ERR_HARDWARE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Response_Status] = &[
            Response_Status::INVALID,
            Response_Status::OK,
            Response_Status::ERR_INPUT,
            Response_Status::ERR_INTERNAL,
            Response_Status::ERR_CHECKSUM,
            Response_Status::ERR_TIMEOUT,
            Response_Status::ERR_HARDWARE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Response_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Response_Status {
}

impl ::std::default::Default for Response_Status {
    fn default() -> Self {
        Response_Status::INVALID
    }
}

impl ::protobuf::reflect::ProtobufValue for Response_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0biodin.proto\x12\x05iodin\"\xf2\x01\n\x07Request\x12\x18\n\x07versi\
    on\x18\x01\x20\x01(\rR\x07version\x120\n\x07command\x18\x02\x20\x01(\x0e\
    2\x16.iodin.Request.CommandR\x07command\x12\x18\n\x07timeout\x18\x03\x20\
    \x01(\rR\x07timeout\x12\x19\n\x08arg_uint\x18\x04\x20\x01(\rR\x07argUint\
    \x12\x1b\n\targ_bytes\x18\x05\x20\x01(\x0cR\x08argBytes\"I\n\x07Command\
    \x12\x0b\n\x07INVALID\x10\0\x12\x0c\n\x08MDB_OPEN\x10\x01\x12\r\n\tMDB_R\
    ESET\x10\x02\x12\n\n\x06MDB_TX\x10\x03\x12\x08\n\x04STOP\x10d\"\xfe\x01\
    \n\x08Response\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12.\
    \n\x06status\x18\x02\x20\x01(\x0e2\x16.iodin.Response.StatusR\x06status\
    \x12\x14\n\x05error\x18\x03\x20\x01(\tR\x05error\x12\x1d\n\ndata_bytes\
    \x18\x04\x20\x01(\x0cR\tdataBytes\"s\n\x06Status\x12\x0b\n\x07INVALID\
    \x10\0\x12\x06\n\x02OK\x10\x01\x12\r\n\tERR_INPUT\x10\x02\x12\x10\n\x0cE\
    RR_INTERNAL\x10\x03\x12\x10\n\x0cERR_CHECKSUM\x10\x04\x12\x0f\n\x0bERR_T\
    IMEOUT\x10\x05\x12\x10\n\x0cERR_HARDWARE\x10\x06b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
